Java Code for RR

import java.util.*;
import java.io.*;

public class RoundRobin {

    public static void findWaitingTime(int processes[],int wt_time[],int n,
        int bursttime[],int quantum, int completion_time[],int arrival_time[]){
        // copy the value of bursttime array into wt_time array
        int rem_time[]=new int[n];
        for(int i=0;i<wt_time.length;i++) {
            rem_time[i]=bursttime[i];
        }
       
        int t=0;
        int arrival=0;

        //processing until the value of element of rem_time array is 0
        while(true){
            boolean done=true;
            for(int i=0;i<n;i++)
            {
                if(rem_time[i]>0)
                {
                    done=false;
                    if(rem_time[i]>quantum && arrival_time[i]<=arrival) {
                        t+=quantum;
                        rem_time[i]-=quantum; 
                    }
                    else {
                        if(arrival_time[i]<=arrival) {
                            t+=rem_time[i];
                            rem_time[i]=0;
                            completion_time[i]=t;
                        }
                    }
                    arrival++;
                }
            }
            if(done==true) {
                break;
            }
        }  
    }
    public static void findTurnAroundTime(int processes[],int wt_time[],int n,int bursttime[],
            int tat_time[],int completion_time[],int arrival_time[])
    {
        for(int i=0;i<n;i++) {
            tat_time[i]=completion_time[i]-arrival_time[i];
            wt_time[i]=tat_time[i]-bursttime[i];
        }
    }
    public static void findAvgTime(int processes[], int n, int bursttime[], int quantum, int arrival_time[]){
        int wt_time[]=new int[n];
        int tat_time[]=new int[n];
        int completion_time[]=new int[n];
        int total_wt=0;
        int total_tat=0;
        
        //Function to find waiting time of all process
        findWaitingTime(processes,wt_time,n,bursttime,quantum,completion_time,arrival_time);

        //Function to find turn around time for all processes
        findTurnAroundTime(processes,wt_time,n,bursttime,tat_time,completion_time,arrival_time);
    
        //Display processes along with all details

        System.out.println("Processes" + "Arrival Time\t" +"Burst time" +"completion time"
        +"Turn Around Time" +"Waiting Time");

        for(int i=0;i<n;i++){
            total_wt=total_wt + wt_time[i];
            total_tat=total_tat + tat_time[i];
            System.out.println(" " + (i+1) + "\t\t" + arrival_time[i] 
                + "\t\t" + bursttime[i] +"\t" +completion_time[i] + "\t\t" + tat_time[i]
                + "\t\t" + wt_time[i]);
        }
        System.out.println("Average waiting time=" +(float)total_wt/(float)n);
        System.out.println("Average turn around time=" +(float)total_tat/(float)n);
   
    }
   
    //Driver Method
    public static void main(String[] args){
        int arrival_time[]=new int[]{0,10,10,80,85};
        int bursttime[]= new int[] {75,40,25,20,45};
        int processes[]=new int[] {1,2,3,4,5};
        int n = processes.length;
        int quantum=10;  
        findAvgTime(processes, n, bursttime, quantum, arrival_time);
    }
 }